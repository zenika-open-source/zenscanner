from django.db import models
from core.models import Scan, Repository
from uuid import uuid4
from datetime import datetime
from django.utils.timezone import make_aware
import json


class Vulnerability(models.Model):
    created_at = models.DateTimeField()
    scan = models.ForeignKey(Scan, on_delete=models.CASCADE, default="-1")
    repository = models.ForeignKey(Repository, on_delete=models.CASCADE, null=True)
    tool = models.TextField()
    rule = models.TextField()
    path = models.TextField()
    details = models.TextField()
    level = models.IntegerField(default=0)
    uuid = models.UUIDField(default=uuid4)
    sarif = models.TextField()
    commit_id = models.TextField()
    author_email = models.TextField()
    is_new = models.BooleanField(default=True)

    def save(self, *args, **kwargs):
        if not self.id:
            self.created_at = make_aware(datetime.now())
        if self.path:
            self.path = self.format_path()
        super(Vulnerability, self).save(*args, **kwargs)

    @property
    def commit_url(self):
        f = self.scan.repository.formater
        return f.fmt_commit_url(self.scan) if f else ""

    def format_path(self):
        return self.path.replace('file:///src', '')

    @property
    def vulnerability_url(self):
        f = self.scan.repository.formater
        if f:
            return f.fmt_vulnerability_url(self)
        else:
            return ""

    @property
    def locations(self):
        return json.loads(self.sarif).get('locations', [])

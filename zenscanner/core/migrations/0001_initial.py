# Generated by Django 4.1.4 on 2022-12-12 09:45

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Credential',
            fields=[
                ('label', models.TextField()),
                ('type', models.TextField()),
                ('_uuid', models.UUIDField(db_column='uuid', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('_raw_value', models.TextField(db_column='raw_value', default='')),
                ('allow_sync', models.BooleanField(default=True)),
                ('owner', models.ForeignKey(default='-1', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Repository',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('url', models.TextField()),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('authkey', models.UUIDField(default=uuid.uuid4)),
                ('scan_count', models.IntegerField(default=0)),
                ('source_control', models.TextField(default='git')),
                ('_credential', models.ForeignKey(db_column='credential_id', default=None, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, to='core.credential')),
                ('owner', models.ForeignKey(default='-1', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Scan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('branch', models.TextField()),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('last_commit', models.TextField()),
                ('warning_count', models.IntegerField(default=0)),
                ('error_count', models.IntegerField(default=0)),
                ('note_count', models.IntegerField(default=0)),
                ('none_count', models.IntegerField(default=0)),
                ('new_warning_count', models.IntegerField(default=0)),
                ('new_error_count', models.IntegerField(default=0)),
                ('new_note_count', models.IntegerField(default=0)),
                ('new_none_count', models.IntegerField(default=0)),
                ('_status', models.TextField(default='PENDING', null=True)),
                ('repository', models.ForeignKey(default='-1', on_delete=django.db.models.deletion.CASCADE, to='core.repository')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerToken',
            fields=[
                ('token', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('deleted_at', models.DateTimeField()),
                ('scan', models.ForeignKey(default='-1', on_delete=django.db.models.deletion.CASCADE, to='core.scan')),
            ],
        ),
        migrations.CreateModel(
            name='Vulnerability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('tool', models.TextField()),
                ('rule', models.TextField()),
                ('path', models.TextField()),
                ('details', models.TextField()),
                ('level', models.IntegerField(default=0)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('sarif', models.TextField()),
                ('commit_id', models.TextField()),
                ('author_email', models.TextField()),
                ('is_new', models.BooleanField(default=True)),
                ('repository', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='core.repository')),
                ('scan', models.ForeignKey(default='-1', on_delete=django.db.models.deletion.CASCADE, to='core.scan')),
            ],
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('deleted_at', models.DateTimeField()),
                ('user', models.ForeignKey(default='-1', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ScanResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.UUIDField(default=uuid.uuid4)),
                ('branch', models.TextField()),
                ('sarif', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_commit', models.TextField()),
                ('repository', models.ForeignKey(default='-1', on_delete=django.db.models.deletion.CASCADE, to='core.repository')),
            ],
        ),
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('repository', models.ForeignKey(default='-1', on_delete=django.db.models.deletion.CASCADE, to='core.repository')),
            ],
        ),
        migrations.CreateModel(
            name='AccessToken',
            fields=[
                ('label', models.TextField()),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('owner', models.ForeignKey(default='-1', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
